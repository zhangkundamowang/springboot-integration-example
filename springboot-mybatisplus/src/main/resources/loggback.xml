<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<configuration>-->
    <!--&lt;!&ndash;定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径&ndash;&gt;-->
    <!--&lt;!&ndash;日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL &ndash;&gt;-->

    <!--&lt;!&ndash; %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, &ndash;&gt;-->
    <!--&lt;!&ndash; appender是configuration的子节点，是负责写日志的组件。 &ndash;&gt;-->
    <!--&lt;!&ndash; ConsoleAppender：把日志输出到控制台 &ndash;&gt;-->
    <!--<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">-->
        <!--<encoder>-->
            <!--<pattern>%d %p (%file:%line\)- %m%n</pattern>-->
            <!--&lt;!&ndash; 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 &ndash;&gt;-->
            <!--&lt;!&ndash;<charset>UTF-8</charset>&ndash;&gt;-->
        <!--</encoder>-->
    <!--</appender>-->
    <!--&lt;!&ndash; RollingFil eAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 &ndash;&gt;-->
    <!--&lt;!&ndash; 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是sys.log &ndash;&gt;-->
    <!--&lt;!&ndash;                   2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名&ndash;&gt;-->
    <!--<appender name="SYSLOG"-->
              <!--class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--<File>D://idea.workspace/springboot-integration-example/springboot-mybatisplus/log/log.log</File>-->
        <!--&lt;!&ndash; rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 &ndash;&gt;-->
        <!--&lt;!&ndash; TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动-->
        <!--但是在实际使用中并未有按照预期根据日期和大小生成日志，查了了相关文章说是TimeBasedRollingPolicy和SizeBasedTriggeringPolicy冲突-->
        <!--所以改成了SizeAndTimeBasedRollingPolicy &ndash;&gt;-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">-->
            <!--&lt;!&ndash; 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 &ndash;&gt;-->
            <!--&lt;!&ndash; 文件名：log/sys.2017-12-05.0.log &ndash;&gt;-->
            <!--<FileNamePattern>D://idea.workspace/springboot-integration-example/springboot-mybatisplus/log/%d/log.%d.%i.log</FileNamePattern>-->
            <!--&lt;!&ndash;每天产生一个日志文件，若达到最大值,则再生成一个文件.该日志文件的保存期限为5天 &ndash;&gt;-->
            <!--&lt;!&ndash;<MaxHistory>5</MaxHistory>      下一行测试完换成上一行         &ndash;&gt;-->
            <!--<MaxHistory>5</MaxHistory>-->
            <!--<maxFileSize>25MB</maxFileSize>-->
            <!--&lt;!&ndash;maxHistory 无效，需要增加一个设置 <cleanHistoryOnStart>true</cleanHistoryOnStart>，-->
            <!--在只有设置为true并且 maxHistory 不为零才能起效。&ndash;&gt;-->
            <!--<totalSizeCap>2GB</totalSizeCap>-->
            <!--<cleanHistoryOnStart>true</cleanHistoryOnStart>-->
        <!--</rollingPolicy>-->

        <!--<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
            <!--&lt;!&ndash;格式化输出：%d表示日期，%p表示    ，%n是换行符&ndash;&gt;-->
            <!--&lt;!&ndash; pattern节点，用来设置日志的输入格式 &ndash;&gt;-->
            <!--<pattern>-->
                <!--%d %p (%file:%line\)- %m%n-->
            <!--</pattern>-->
            <!--&lt;!&ndash; 记录日志的编码 &ndash;&gt;-->
            <!--&lt;!&ndash;<charset>UTF-8</charset> &lt;!&ndash; 此处设置字符集 &ndash;&gt;&ndash;&gt;-->
        <!--</encoder>-->
    <!--</appender>-->


    <!--&lt;!&ndash; 控制台输出日志级别 &ndash;&gt;-->
    <!--&lt;!&ndash; <root level="info">-->
        <!--<appender-ref ref="STDOUT"/>-->
    <!--</root> &ndash;&gt;-->

    <!--&lt;!&ndash; 控制台输出日志级别 &ndash;&gt;-->
    <!--<root level="INFO">-->
        <!--<appender-ref ref="STDOUT"/>-->
        <!--<appender-ref ref="SYSLOG"/>-->
    <!--</root>-->

    <!--&lt;!&ndash; 指定项目中某个包，当有日志操作行为时的日志记录级别 &ndash;&gt;-->
    <!--&lt;!&ndash; shop.bangke.credit为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG &ndash;&gt;-->
    <!--&lt;!&ndash; 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  &ndash;&gt;-->
    <!--&lt;!&ndash; <logger name="com.*" level="DEBUG">-->
        <!--<appender-ref ref="syslog"/>-->
    <!--</logger> &ndash;&gt;-->
    <!--<logger name="com.*" level="DEBUG"/>-->
<!--</configuration>-->
